<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.oa.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.qf.oa.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="phonenumber" jdbcType="INTEGER" property="phonenumber" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="adress" jdbcType="VARCHAR" property="adress" />
    <result column="admin" jdbcType="INTEGER" property="admin" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, password, age, phonenumber, email, adress, admin
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qf.oa.entity.User">
    insert into user (id, name, password, 
      age, phonenumber, email, 
      adress, admin)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{phonenumber,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, 
      #{adress,jdbcType=VARCHAR}, #{admin,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qf.oa.entity.User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <!--<if test="id != null">
        id,
      </if>-->
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="phonenumber != null">
        phonenumber,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="adress != null">
        adress,
      </if>
      <if test="admin != null">
        admin,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <!--<if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>-->
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="phonenumber != null">
        #{phonenumber,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="adress != null">
        #{adress,jdbcType=VARCHAR},
      </if>
      <if test="admin != null">
        #{admin,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qf.oa.entity.User">
    update user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="phonenumber != null">
        phonenumber = #{phonenumber,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="adress != null">
        adress = #{adress,jdbcType=VARCHAR},
      </if>
      <if test="admin != null">
        admin = #{admin,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qf.oa.entity.User">
    update user
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      phonenumber = #{phonenumber,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      adress = #{adress,jdbcType=VARCHAR},
      admin = #{admin,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--通过用户查询用户对象-->
  <select id="getUserByUsername" parameterType="string" resultMap="BaseResultMap">
    select * from user where name=#{username}
  </select>

  <!--查询分页的用户信息-->
  <select id="getUserList" resultMap="BaseResultMap">
    SELECT * FROM USER
  </select>
  <!--根据用户查管理员的信息-->
  <select id="getLoginUserByAdmin" parameterType="string" resultMap="BaseResultMap">
    SELECT *from USER WHERE name=#{username}
  </select>
  <!--管理员批量删除用户信息-->
  <delete id="batchDelByID">
    DELETE FROM USER where id IN
    <foreach collection="ids" item="ids" open="(" separator="," close=")">
      #{ids}
    </foreach>
  </delete>

  <!--查询该角色下所有的用户信息-->
  <select id="getUserListByRoleId" parameterType="long" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from USER where id=#{roleId} and admin=1
  </select>

  <!--查询该角色下没有的用户信息-->
  <select id="getNoAuthUserByRoleId" resultMap="BaseResultMap">
    SELECT *from USER  where id not IN
    (SELECT id from user where id=#{roleId})
    <if test="userName!=null and userName!=''">
      and name like concat('%',#{userName},'%')
    </if>
    and admin not IN (SELECT admin from user where id=#{roleId})
  </select>

  <!--批量授权用户-->
  <update id="batchAddUser">
    UPDATE USER set admin=1 where id in
    <foreach collection="ids" item="roleId" open="(" separator="," close=")" >
      #{roleId}
    </foreach>
  </update>

  <!--查询该角色下所有的用户信息-->
  <select id="getUserListByUser" parameterType="long" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from USER where id=#{roleId} and admin=0
  </select>
  <!--解除授权用户,删除-->
  <delete id="delAuthUser">
    delete from user where id=#{roleId}
  </delete>
</mapper>